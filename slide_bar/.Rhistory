# next line of code only necessary if we want to use GRASS as installed by
# OSGeo4W. Among others, this adds some paths to PATH, which are also needed
# for running GRASS.
link2GI::paramGRASSw(link[ind, ])
grass_path =
ifelse(test = !is.null(link$installation_type) &&
link$installation_type[ind] == "osgeo4W",
yes = file.path(link$instDir[ind], "apps/grass", link$version[ind]),
no = link$instDir)
initGRASS(gisBase = grass_path,
# home parameter necessary under UNIX-based systems
home = tempdir(),
gisDbase = tempdir(), location = "london",
mapset = "PERMANENT", override = TRUE)
execGRASS("g.proj", flags = c("c", "quiet"),
proj4 = st_crs(london_streets)$proj4string)
b_box = st_bbox(london_streets)
execGRASS("g.region", flags = c("quiet"),
n = as.character(b_box["ymax"]), s = as.character(b_box["ymin"]),
e = as.character(b_box["xmax"]), w = as.character(b_box["xmin"]),
res = "1")
link2GI::linkGRASS7(london_streets, ver_select = TRUE)
use_sf()
writeVECT(SDF = london_streets, vname = "london_streets")
writeVECT(SDF = points[, 1], vname = "points")
# clean street network
execGRASS(cmd = "v.clean", input = "london_streets", output = "streets_clean",
tool = "break", flags = "overwrite")
# connect points with street network
execGRASS(cmd = "v.net", input = "streets_clean", output = "streets_points_con",
points = "points", operation = "connect", threshold = 0.001,
flags = c("overwrite", "c"))
data("cycle_hire", package = "spData")
points = cycle_hire[1:25, ]
head(points)
library(osmdata)
b_box = st_bbox(points)
london_streets = opq(b_box) %>%
add_osm_feature(key = "highway") %>%
osmdata_sf() %>%
`[[`("osm_lines")
london_streets = dplyr::select(london_streets, osm_id)
library(df)
library(sf)
b_box = st_bbox(points)
london_streets = opq(b_box) %>%
add_osm_feature(key = "highway") %>%
osmdata_sf() %>%
`[[`("osm_lines")
london_streets = dplyr::select(london_streets, osm_id)
b_box = st_bbox(points)
st_geometry(points$geometry) = 'geometry'
st_geometry(points$geometry) ,- 'geometry'
st_geometry(points$geometry) <- 'geometry'
st_geometry(points) = 'geometry'
library(osmdata)
b_box = st_bbox(points)
london_streets = opq(b_box) %>%
add_osm_feature(key = "highway") %>%
osmdata_sf() %>%
`[[`("osm_lines")
london_streets = dplyr::select(london_streets, osm_id)
library(link2GI)
link = findGRASS()
library(rgrass7)
# find a GRASS 7 installation, and use the first one
ind = grep("7", link$version)[1]
# next line of code only necessary if we want to use GRASS as installed by
# OSGeo4W. Among others, this adds some paths to PATH, which are also needed
# for running GRASS.
link2GI::paramGRASSw(link[ind, ])
grass_path =
ifelse(test = !is.null(link$installation_type) &&
link$installation_type[ind] == "osgeo4W",
yes = file.path(link$instDir[ind], "apps/grass", link$version[ind]),
no = link$instDir)
initGRASS(gisBase = grass_path,
# home parameter necessary under UNIX-based systems
home = tempdir(),
gisDbase = tempdir(), location = "london",
mapset = "PERMANENT", override = TRUE)
execGRASS("g.proj", flags = c("c", "quiet"),
proj4 = st_crs(london_streets)$proj4string)
b_box = st_bbox(london_streets)
execGRASS("g.region", flags = c("quiet"),
n = as.character(b_box["ymax"]), s = as.character(b_box["ymin"]),
e = as.character(b_box["xmax"]), w = as.character(b_box["xmin"]),
res = "1")
link2GI::linkGRASS7(london_streets, ver_select = TRUE)
use_sf()
writeVECT(SDF = london_streets, vname = "london_streets")
writeVECT(SDF = points[, 1], vname = "points")
# clean street network
execGRASS(cmd = "v.clean", input = "london_streets", output = "streets_clean",
tool = "break", flags = "overwrite")
# connect points with street network
execGRASS(cmd = "v.net", input = "streets_clean", output = "streets_points_con",
points = "points", operation = "connect", threshold = 0.001,
flags = c("overwrite", "c"))
execGRASS(cmd = "v.net.salesman", input = "streets_points_con",
output = "shortest_route", center_cats = paste0("1-", nrow(points)),
flags = c("overwrite"))
route = readVECT("shortest_route") %>%
st_as_sf() %>%
st_geometry()
mapview::mapview(route, map.types = "OpenStreetMap.BlackAndWhite", lwd = 7) +
points
library(stplanr)
dl_stats19() # download and extract stats19 road traffic casualty data
library(tigris)
dl_stats19() # download and extract stats19 road traffic casualty data
data("flow", package = "stplanr")
head(flow[c(1:3, 12)])
as.data.frame(cents[1:3, -c(3, 4)])
data("cents", package = "stplanr")
as.data.frame(cents[1:3, -c(3, 4)])
l <- od2line(flow = flow, zones = cents)
route_bl <- route_cyclestreets(from = "Bradford", to = "Leeds")
data_dir <- system.file("extdata", package = "stplanr")
unzip(file.path(data_dir, "smallsa1.zip"))
unzip(file.path(data_dir, "testcycleway.zip"))
sa1income <- as(sf::read_sf("smallsa1.shp"), "Spatial")
testcycleway <- as(sf::read_sf("testcycleway.shp"), "Spatial")
# Remove unzipped files
file.remove(list.files(pattern = "^(smallsa1|testcycleway).*"))
catch800m <- calc_catchment(
polygonlayer = sa1income,
targetlayer = testcycleway,
calccols = c("Total"),
distance = 800,
projection = "austalbers",
dissolve = TRUE
)
plot(sa1income, col = "light grey")
plot(catch800m, col = rgb(1, 0, 0, 0.5), add = TRUE)
plot(testcycleway, col = "green", add = TRUE)
unzip(file.path(data_dir, "sydroads.zip"))
sydroads <- as(sf::read_sf(".", "roads"), "Spatial")
file.remove(list.files(pattern = "^(roads).*"))
sydnetwork <- SpatialLinesNetwork(sydroads)
netcatch800m <- calc_network_catchment(
sln = sydnetwork,
polygonlayer = sa1income,
targetlayer = testcycleway,
calccols = c("Total"),
maximpedance = 800,
distance = 100,
projection = "austalbers"
)
plot(sa1income, col = "light grey")
plot(catch800m, col = rgb(1, 0, 0, 0.5), add = TRUE)
plot(netcatch800m, col = rgb(0, 0, 1, 0.5), add = TRUE)
plot(testcycleway, col = "green", add = TRUE)
unzip(file.path(data_dir, "sydroads.zip"))
sydroads <- as(sf::read_sf(".", "roads"), "Spatial")
plot(sydroads)
file.remove(list.files(pattern = "^(roads).*"))
sydnetwork <- SpatialLinesNetwork(sydroads)
plot(sydnetwork)
library(sp)
library(sf)
london = read_sf(dsn = "C:/Users/b9066009/Documents/PhD/workshops/London.shp")
london = read_sf(dsn = "C:/Users/b9066009/Documents/PhD/workshops/London.shp", layer = 'SHAPEFILE')
class(london)
sp::plot(london)
library(ProjectTemplate)
library(osmdata)
library(opentripplanner) # Load Package
path_data <- file.path(tempdir(), "OTP") # Create folder for data
dir.create(path_data)
path_otp <- otp_dl_jar(path_data) # Download OTP
otp_dl_demo(path_data) # Download demo data
Second, build the OTP graph, start up OTP server and connect to the server
log <- otp_build_graph(otp = path_otp, # Build Graph
dir = path_data)
otp_setup(otp = path_otp, dir = path_data) # Start OTP
otpcon <- otp_connect() # Connect R to OTP
Finally, find routes
route <- otp_plan(otpcon,
fromPlace = c(-1.17502, 50.64590),
toPlace = c(-1.15339, 50.72266))
install.packages(opentripplanner)
install.packages('opentripplanner')
route <- otp_plan(otpcon,
fromPlace = c(-1.17502, 50.64590),
toPlace = c(-1.15339, 50.72266))
library(opentripplanner) # Load Package
path_data <- file.path(tempdir(), "OTP") # Create folder for data
dir.create(path_data)
path_otp <- otp_dl_jar(path_data) # Download OTP
otp_dl_demo(path_data) # Download demo data
Second, build the OTP graph, start up OTP server and connect to the server
log <- otp_build_graph(otp = path_otp, # Build Graph
dir = path_data)
otp_setup(otp = path_otp, dir = path_data) # Start OTP
otpcon <- otp_connect() # Connect R to OTP
Finally, find routes
route <- otp_plan(otpcon,
fromPlace = c(-1.17502, 50.64590),
toPlace = c(-1.15339, 50.72266))
route <- otp_plan(otpcon,
fromPlace = c(-1.17502, 50.64590),
toPlace = c(-1.15339, 50.72266))
path_data <- file.path(tempdir(), "OTP") # Create folder for data
dir.create(path_data)
path_otp <- otp_dl_jar(path_data) # Download OTP
otp_dl_demo(path_data) # Download demo data
log <- otp_build_graph(otp = path_otp, # Build Graph
dir = path_data)
otp_setup(otp = path_otp, dir = path_data) # Start OTP
route <- otp_plan(otpcon,
fromPlace = c(-1.17502, 50.64590),
toPlace = c(-1.15339, 50.72266))
install.packages('RcppSimdJson')
route <- otp_plan(otpcon,
fromPlace = c(-1.17502, 50.64590),
toPlace = c(-1.15339, 50.72266))
route
- Count sheep
- Dummy test - Downing Street walking distance to supermarkets.
- Dummy test: Downing Street walking distance to supermarkets.
- Used buildings as origins -> hello
Generated routes from origins to destinations.
-
---
title: "Phd Supervisory Meeting #5"
author: "Clara Peiret-Garc√≠a"
date: "08/02/2022"
output: beamer_presentation
---
What I've learnt from doign this:
- OSMNX + NetworkX Python packages are very useful.
- I'm working on some limitations (i.e. calculating times instead of distances).
- At the moment I'm exploring other alternatives in R.
- Separating buildings where people live from other buildings is needed. See <https://medium.com/arupcitymodelling/def-osmox-2c6083567bf8>.
- OSMNX & NetworkX Python packages are very useful.
- I'm working on some limitations (i.e. calculating times instead of distances).
- At the moment I'm exploring other alternatives in R.
- Separating buildings where people live from other buildings is needed. See [**this link**]( <https://medium.com/arupcitymodelling/def-osmox-2c6083567bf8>). \textcolor{red}{red}
- OSMNX & NetworkX Python packages are very useful.
- I'm working on some limitations (i.e. calculating times instead of distances).
- At the moment I'm exploring other alternatives in R.
- Separating buildings where people live from other buildings is needed. See [{this link}{blue}]( <https://medium.com/arupcitymodelling/def-osmox-2c6083567bf8>).
- OSMNX & NetworkX Python packages are very useful.
- I'm working on some limitations (i.e. calculating times instead of distances).
- At the moment I'm exploring other alternatives in R.
- Separating buildings where people live from other buildings is needed. See [this link]( <https://medium.com/arupcitymodelling/def-osmox-2c6083567bf8>).
# \donttest{
if(curl::has_internet()) {
r_walk = route(l = l, route_fun = route_osrm, osrm.profile = "foot")
r_bike = route(l = l, route_fun = route_osrm, osrm.profile = "bike")
plot(r_walk$geometry)
plot(r_bike$geometry, col = "blue", add = TRUE)
# r_bc = route(l = l, route_fun = route_bikecitizens)
# plot(r_bc)
# route(l = l, route_fun = route_bikecitizens, wait = 1)
library(osrm)
r_osrm <- route(
l = l,
route_fun = osrmRoute,
returnclass = "sf"
)
nrow(r_osrm)
plot(r_osrm)
sln <- stplanr::SpatialLinesNetwork(route_network_sf)
# calculate shortest paths
plot(sln)
plot(l$geometry, add = TRUE)
r_local <- stplanr::route(
l = l,
route_fun = stplanr::route_local,
sln = sln
)
plot(r_local["all"], add = TRUE, lwd = 5)
}
library(stplanr)
l = od_data_lines[2, ]
# \donttest{
if(curl::has_internet()) {
r_walk = route(l = l, route_fun = route_osrm, osrm.profile = "foot")
r_bike = route(l = l, route_fun = route_osrm, osrm.profile = "bike")
plot(r_walk$geometry)
plot(r_bike$geometry, col = "blue", add = TRUE)
# r_bc = route(l = l, route_fun = route_bikecitizens)
# plot(r_bc)
# route(l = l, route_fun = route_bikecitizens, wait = 1)
library(osrm)
r_osrm <- route(
l = l,
route_fun = osrmRoute,
returnclass = "sf"
)
nrow(r_osrm)
plot(r_osrm)
sln <- stplanr::SpatialLinesNetwork(route_network_sf)
# calculate shortest paths
plot(sln)
plot(l$geometry, add = TRUE)
r_local <- stplanr::route(
l = l,
route_fun = stplanr::route_local,
sln = sln
)
plot(r_local["all"], add = TRUE, lwd = 5)
}
routes <- read.csv("C:/Users/b9066009/Documents/PhD/workshops/routes.csv")
View(routes)
head(routes)
table(routes$X0)
length(unique(routes$X0))
View(routes)
tail(routes)
origins <- read.csv("C:/Users/b9066009/Documents/PhD/workshops/origins.csv")
View(origins)
routes$X0 - origins$X0
table(routes$X0 - origins$X0)
rm(origins)
table(routes$X0)
# Load data ---------------------------------------------------------------
df <- read_sav("C:/Users/b9066009/Downloads/GEO2043_QuantData-4.sav")
# Load data ---------------------------------------------------------------
library(heaven)
# Load data ---------------------------------------------------------------
library(haven)
df <- read_sav("C:/Users/b9066009/Downloads/GEO2043_QuantData-4.sav")
library(ggplot)
library(ggplot2)
colnames(df)
# scatter plot
ggplot(df, aes(x = phg_good, y = p_obese)) +
labs(title = "Correlation between Obesity and % of Population with good health",
x = 'People with good general health (%)',
y = 'Obesity (%)') +
geom_smooth(method = 'lm')
# scatter plot
ggplot(df, aes(x = pgh_good, y = p_obese)) +
labs(title = "Correlation between Obesity and % of Population with good health",
x = 'People with good general health (%)',
y = 'Obesity (%)') +
geom_smooth(method = 'lm')
# scatter plot
ggplot(df, aes(x = pgh_good, y = p_obese)) +
labs(title = "Correlation between Obesity and % of Population with good health",
x = 'People with good general health (%)',
y = 'Obesity (%)')
# scatter plot
ggplot(df, aes(x = pgh_good, y = p_obese)) +
labs(title = "Correlation between Obesity and % of Population with good health",
x = 'People with good general health (%)',
y = 'Obesity (%)') +
plot(df$pgh_good, df$p_obese)
View(df)
mean(df$p_obese)
# scatter plot
ggplot(df, aes(x = pgh_good, y = p_obese)) +
labs(title = "Correlation between Obesity and % of Population with good health",
x = 'People with good general health (%)',
y = 'Obesity (%)')
plot(df$pgh_good, df$p_obese)
# scatter plot
ggplot(df, aes(x = pgh_good, y = p_obese)) +
labs(title = "Correlation between Obesity and % of Population with good health",
x = 'People with good general health (%)',
y = 'Obesity (%)')
plot(df$pgh_good, df$p_obese)
# scatter plot
ggplot(df, aes(x = pgh_good, y = p_obese))
# scatter plot
ggplot(df, aes(x = pgh_good, y = p_obese)) +
geom_point() +
labs(title = "Correlation between Obesity and % of Population with good health",
x = 'People with good general health (%)',
y = 'Obesity (%)')
# scatter plot
ggplot(df, aes(x = pgh_good, y = p_obese)) +
geom_point() +
labs(title = "Correlation between Obesity and % of Population with good health",
x = 'People with good general health (%)',
y = 'Obesity (%)') +
geom_smooth(method = 'lm')
# scatter plot
ggplot(df, aes(x = pgh_good, y = p_obese)) +
geom_point() +
labs(title = "Correlation between Obesity and % of Population with good health",
x = 'People with good general health (%)',
y = 'Obesity (%)') +
theme_classic() +
geom_smooth(method = 'lm')
# scatter plot
ggplot(df, aes(x = pgh_good, y = p_obese)) +
geom_point() +
labs(title = "Correlation between Obesity and % of Population with good health",
x = 'People with good general health (%)',
y = 'Obesity (%)') +
theme_classic() +
geom_smooth(method = 'lm', se = FALSE)
# correlation index
# do we need Spearman or Pearson? From the scatter plot we see the relationship is quite linear.
cor(x = df$pgh_good, y = df$p_obese, method = 'pearson')
# correlation index
# do we need Spearman or Pearson? From the scatter plot we see the relationship is quite linear.
cor(x = df$pgh_good, y = df$p_obese, method = 'spearman')
# correlation index
# do we need Spearman or Pearson? From the scatter plot we see the relationship is quite linear.
cor(x = df$pgh_good, y = df$p_obese, method = 'pearson')
# correlation index
# do we need Spearman or Pearson? From the scatter plot we see the relationship is quite linear.
cor(x = df$pgh_good, y = df$p_obese)
# correlation index
# do we need Spearman or Pearson? From the scatter plot we see the relationship is quite linear.
cor(x = df$pgh_good, y = df$p_obese) ^ 2
# Simple linear regression
lm = lm(p_obese ~ pgh_good, data = df)
summary(lm)
cor(df$p_obese, df$pgh_good)
plot(lm$residuals)
cor(df$p_obese, df$pgh_good)^2
library(ProjectTemplate)
library(readxl)
df <- read_excel("C:/Users/b9066009/Downloads/hpssadataset46medianpricepaidforresidentialpropertiesbylsoa1.xls",
sheet = "Data", col_names = FALSE)
View(df)
df(-c(1:5))
df(-c(1:5),)
df(,-c(1:5)
df(,-c(1:5))
df[-c(1:5),]
df = df[-c(1:5),]
library(janitor)
install.packages("janitor")
library(janitor)
df %>% row_to_names(row_number = 1)
df = df %>% row_to_names(row_number = 1)
lsoa <- read.csv("C:/Users/b9066009/Downloads/Lower_Layer_Super_Output_Areas__December_2001__Boundaries_EW_BFC.csv")
View(lsoa)
colnames(df)
colnames(lsoa)
merge(df, lsoa, by.x = 'Local authority code', 'LSOA01CD')
test = merge(df, lsoa, by.x = 'Local authority code', 'LSOA01CD')
View(test)
df[-c(-2)]
df[1:length(df)-2]
df[1:(length(df)-2)]
df = df[1:(length(df)-2)]
test = merge(df, lsoa, by.x = 'Local authority code', 'LSOA01CD')
View(test)
test = merge(df, lsoa, by.x = 'LSOA code', 'LSOA01CD')
View(test)
write.csv(test, 'test.csv', row.names = FALSE)
write.csv(test, 'C:/Users/b9066009/Documents/PhD/workshops/test.csv', row.names = FALSE)
library(readr)
house_prices_local_authority_time_series_v6_filtered_2022_02_22T13_27_02Z <- read_csv("C:/Users/b9066009/Downloads/house-prices-local-authority-time-series-v6-filtered-2022-02-22T13-27-02Z.csv")
View(house_prices_local_authority_time_series_v6_filtered_2022_02_22T13_27_02Z)
devtools::install("xvrdm/ricv")
devtools::install("xvrdm/ricv")
library(ricv)
shiny::runApp('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/gisruk_2022/slide_bar')
runApp()
runApp('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/gisruk_2022/slide_bar')
runApp('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/gisruk_2022/slide_bar')
runApp('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/gisruk_2022/slide_bar')
runApp('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/gisruk_2022/slide_bar')
runApp('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/gisruk_2022/slide_bar')
runApp('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/gisruk_2022/slide_bar')
runApp('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/gisruk_2022/slide_bar')
runApp('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/gisruk_2022/slide_bar')
runApp('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/gisruk_2022/slide_bar')
runApp('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/gisruk_2022/slide_bar')
runApp('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/gisruk_2022/slide_bar')
runApp('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/gisruk_2022/slide_bar')
runApp('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/gisruk_2022/slide_bar')
runApp('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/gisruk_2022/slide_bar')
runApp('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/gisruk_2022/slide_bar')
runApp('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/gisruk_2022/slide_bar')
runApp('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/gisruk_2022/slide_bar')
runApp('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/gisruk_2022/slide_bar')
runApp('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/gisruk_2022/slide_bar')
runApp('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/gisruk_2022/slide_bar')
runApp('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/gisruk_2022/slide_bar')
runApp('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/gisruk_2022/slide_bar')
runApp('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/gisruk_2022/slide_bar')
runApp('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/gisruk_2022/slide_bar')
runApp('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/gisruk_2022/slide_bar')
runApp('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/gisruk_2022/slide_bar')
runApp('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/gisruk_2022/slide_bar')
runApp('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/gisruk_2022/slide_bar')
runApp('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/gisruk_2022/slide_bar')
runApp('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/gisruk_2022/slide_bar')
ui <- ricv(img1 = "https://github.com/cpeiret/2022_gisruk/raw/main/notebooks/image1.png",
img2 = "https://github.com/cpeiret/2022_gisruk/raw/main/notebooks/image2.png",
options = list(addCircle = T, hoverStart = T, fluidMode = T, verticalMode = T),
)
runApp('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/gisruk_2022/slide_bar')
runApp('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/gisruk_2022/slide_bar')
runApp('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/gisruk_2022/slide_bar')
runApp('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/gisruk_2022/slide_bar')
runApp('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/gisruk_2022/slide_bar')
runApp('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/gisruk_2022/slide_bar')
runApp('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/gisruk_2022/slide_bar')
runApp('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/gisruk_2022/slide_bar')
getwd()
setwd('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/2022_gisruk/2022_gisruk/slide_bar')
runApp('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/gisruk_2022/slide_bar')
runApp('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/gisruk_2022/slide_bar')
runApp('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/gisruk_2022/slide_bar')
runApp('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/gisruk_2022/slide_bar')
runApp('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/gisruk_2022/slide_bar')
runApp('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/gisruk_2022/slide_bar')
runApp('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/gisruk_2022/slide_bar')
runApp('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/gisruk_2022/slide_bar')
runApp('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/gisruk_2022/slide_bar')
runApp('C:/Users/b9066009/Documents/PhD/conferences/2022_GISRUK/gisruk_2022/slide_bar')
